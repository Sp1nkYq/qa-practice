Задание 1. Читаем книги.

1.	Анализ требований
Вот некоторые из наиболее важных сценариев, которые необходимо протестировать, а также потенциальный риск, если они не будут протестированы должным образом:

Регистрация и Авторизация
•	Создание личного аккаунта: 
Тестировать процесс регистрации с использованием электронной почты и пароля, включая проверку уникальности логина и электронной почты.
Риск: если не проверить уникальность логина и электронной почты, это может привести к созданию дубликатов аккаунтов, что может вызвать конфликты и проблемы с авторизацией.
•	Авторизация через социальные сети: 
Тестировать процесс авторизации через ВК, ОК, Tg, включая проверку корректной передачи данных и авторизации.
Риск: неправильная настройка авторизации через социальные сети может привести к утечке данных или невозможности авторизоваться.
•	Восстановление доступа:
Тестировать процесс восстановления доступа через электронную почту, включая проверку отправки и подтверждения восстановления пароля.
Риск: если процесс восстановления доступа не работает корректно, пользователи могут потерять доступ к своим аккаунтам без возможности восстановления.

 Покупка, Подписочная Модель и Управление Библиотекой
•	Добавление книг в корзину и оформление покупки: 
Тестировать процесс добавления книг в корзину, оформления покупки и обработку различных способов оплаты (банковская карта, электронные кошельки).
Риск: ошибки в процессе покупки могут привести к финансовым потерям для пользователей и репутационным рискам для сервиса.
•	Оформление подписки: 
Тестировать процесс оформления подписки, включая проверку тарифных планов, скидок для студентов и автоматическое обновление списка книг.
Риск: неправильная настройка подписочной модели может привести к неверному списанию средств или недоступности книг для подписчиков.
•	Управление личной библиотекой: 
Тестировать функции просмотра, скрытия и удаления книг из библиотеки, а также создание категорий.
Риск: ошибки в управлении библиотекой могут привести к потере данных о купленных книгах или невозможности доступа к ним.
Чтение Книг
•	Онлайн-читалка: 
Тестировать функции закладок, аннотаций, выделений текста, регулировку шрифтов и темы.
Риск: нефункциональная читалка может привести к недовольству пользователей и снижению пользовательского опыта.
•	Чтение в офлайн-режиме: 
Тестировать процесс предварительного скачивания книг и чтения в офлайн-режиме.
Риск: невозможность чтения в офлайн-режиме может быть критичной для пользователей с ограниченным доступом к интернету.

Самый важный функционал для тестирования

Авторизация и регистрация являются фундаментальными компонентами любого веб-приложения, и их правильная работа критически важна. Если эти функции не протестированы должным образом, это может привести к следующим последствиям:

-  Сценарий: Забыли протестировать авторизацию через социальные сети
- Что было дальше: После запуска приложения, пользователи начали жаловаться на то, что не могут авторизоваться через социальные сети. Это привело к потере доверия и репутационным рискам, поскольку пользователи не смогли пользоваться своими аккаунтами.
- Результат: Команда разработчиков была вынуждена срочно выпустить обновление, что заняло несколько дней. В это время, пользователи не могли пользоваться сервисом, что привело к финансовым потерям и снижению пользовательской базы.

Тестирование авторизации и регистрации должно включать различные сценарии, такие как успешная регистрация, авторизация, восстановление пароля, а также обработку ошибок и исключений, чтобы обеспечить стабильность и безопасность сервиса.
 
2.	Оценка юзабилити

Чтобы оценить юзабилити интерфейса приложения «BookInHand», необходимо рассмотреть несколько ключевых аспектов и использовать эффективные методы оценки. 
Аспекты Интерфейса для Проверки
Ориентирование и Навигация
•	Легкость ориентирования: Проверьте, насколько легко пользователю найти необходимую информацию или функции при первом визите и при повторных посещениях.
•	Навигация: Оцените, сколько кликов требуется для достижения целевых действий (например, поиск книги, оформление покупки, доступ к личной библиотеке).
Выполнение Целевых Действий
•	Совершение целевых действий: Проверьте, как легко пользователю выполнить основные действия, такие как регистрация, авторизация, покупка книг, чтение книг в онлайн и офлайн режимах.
Ошибочные Действия
•	Частота ошибок: Оцените, сколько ошибок пользователь совершает при взаимодействии с интерфейсом и как быстро он может исправить эти ошибки.
Удовлетворенность Пользователей
•	Общая удовлетворенность: Проверьте, насколько приятно пользователю взаимодействовать с приложением, включая дизайн, подачу информации и полезность функций.
Технические Параметры
•	Скорость загрузки: Оцените скорость загрузки страниц и перехода между ними, чтобы обеспечить быструю и плавную навигацию.
Адаптивность
•	Адаптация под устройства: Проверьте, как интерфейс выглядит и функционирует на различных устройствах, включая мобильные платформы.
Сравнение с Другими Приложениями
•	Сравнительное Тестирование: Проведите сравнительное тестирование с другими приложениями в той же нише, чтобы определить сильные и слабые стороны вашего интерфейса по сравнению с конкурентами. Это поможет выявить лучшие практики и области для улучшения.
Создание Шкалы Удобности
•	Использование SUS: Вместо создания собственной шкалы, рекомендуется использовать существующую и широко признанную шкалу SUS. Это позволит получить стандартизированные и легко интерпретируемые результаты.
Выполнив эти действия, вы сможете всесторонне оценить удобство использования приложения «BookInHand» и принимать решения, основанные на данных, для улучшения взаимодействия с пользователем. 
3. Планирование(порядок) автоматизации:
Для автоматизации выбираем наиболее приоритетные тест- кейсы. То есть тот функционал, который должен всегда работать успешно.
В первую очередь автоматизируем API-тесты, так как они быстрее UI тестов. 
Для автоматизации API тестов будем использовать Python и библиотеку requests. Для UI тестов будем использовать фреймворки selenium или playwright.

	1. Регистрация и авторизация
Тестируемые сценарии:
•	Регистрация пользователя 
•	Авторизация через социальные сети 
2. Каталог книг и карточка книги	
Тестируемые сценарии:
•	Проверка поиска книг и их фильтрация
•	Проверка отображения информации на карточке книги
	3. Покупка и подписочная модель
Тестируемые сценарии:
•	Добавление книги в корзину и оформление покупки
•	Оформление подписки
•	Проверка оплаты
4. Чтение книг
Тестируемые сценарии:
•	Проверка работы читалки в онлайн/офлайн режиме
•	Переключение между дневными и ночными режимами
5. Социальное взаимодействие 
Тестируемые сценарии:
•	Проверка системы обратной связи (отзывы и оценки книг)
•	Проверка системы подписок и уведомлений
 
При подготовке отчетов по тестированию веб-приложения «BookInHand», необходимо создать несколько ключевых документов, тщательно документировать обнаруженные дефекты и использовать конкретные метрики для оценки качества приложения.

Документы Тестирования:

План Тестирования 
•	Это основной документ, который описывает весь объем работ по тестированию, включая стратегию тестирования, график релизов, обязанности и ответственности команды, и инструменты, которые будут использованы.
•	План тестирования должен включать детали о том, что будет тестироваться, в какие сроки, и какими методами.
Тест-Кейсы
•	Тест-кейсы представляют собой подробные инструкции по выполнению конкретных тестов. Они должны охватывать различные сценарии и бизнес-процессы, такие как регистрация, авторизация, покупка книг, чтение книг и т.д.
•	Примеры тест-кейсов включают проверку гиперссылок, форм ввода, cookie, и интерфейсов между серверами и базами данных.
Чек-Лист
•	Чек-лист является кратким перечнем проверок, которые необходимо выполнить во время тестирования. Он помогает с тем, что все необходимые аспекты приложения были протестированы.
•	Чек-лист может включать пункты по проверке HTML и CSS, тестированию форм, проверке ссылок и т.д.
Баг-Репорт
•	Баг-репорт используется для документирования обнаруженных дефектов. Он должен содержать подробную информацию о дефекте, включая шаги по воспроизведению, ожидаемый результат и фактический результат.
•	Примеры полей в баг-репорте: ID дефекта, описание дефекта, шаги по воспроизведению, ожидаемый результат, фактический результат, приоритет и статус.
Отчет о Тестировании
•	Отчет о тестировании суммирует результаты тестирования, включая количество обнаруженных дефектов, их статус, и общую оценку качества приложения. Он также может содержать рекомендации по улучшению.





Документирование Обнаруженных Дефектов
Структура Баг-Репорта
•	ID Дефекта: Уникальный идентификатор дефекта.
•	Описание Дефекта: Краткое описание проблемы.
•	Шаги по Воспроизведению: Детальные шаги, которые необходимо выполнить, чтобы воспроизвести дефект.
•	Ожидаемый Результат: Ожидаемое поведение приложения.
•	Фактический Результат: Фактическое поведение приложения при воспроизведении дефекта.
•	Приоритет и Статус: Приоритет дефекта (критический, высокий, средний, низкий) и его текущий статус (открыт, в процессе, закрыт).

Метрики для Оценки Качества Приложения
Метрики Функциональности
•	Количество и Типы Дефектов: Количество обнаруженных дефектов, классифицированных по типу.
•	Процент Пройденных Тестов: Процент тестов, которые прошли успешно без дефектов.
•	Время на Исправление Дефектов: Среднее время, необходимое для исправления дефектов.
Метрики Производительности
•	Время Отклика: Время, необходимое для загрузки страниц и выполнения запросов.
•	Пропускная Способность: Количество запросов, которые система может обработать за единицу времени.
•	Утилизация Ресурсов: Использование системных ресурсов (CPU, RAM, и т.д.) во время тестирования.
Метрики Безопасности
•	Количество Уязвимостей: Количество выявленных уязвимостей в системе.
•	Уровень Защиты Данных: Оценка уровня защиты конфиденциальных данных и паролей.
•	Отсутствие Небезопасных Ссылок: Проверка наличия небезопасных ссылок и прямых ссылок на объекты.
Метрики Юзабилити
•	System Usability Scale (SUS): Использование SUS для оценки удобства использования интерфейса.
•	Удовлетворенность Пользователей: Оценка общей удовлетворенности пользователей при взаимодействии с приложением.
•	Частота Ошибок: Количество ошибок, совершаемых пользователями при выполнении целевых действий.
Эти документы и метрики помогут вам систематически и тщательно оценить качество веб-приложения «BookInHand» и обеспечить его стабильную и безопасную работу.
Задание 2. Звезда смерти.
Работа с документацией и Postman. 

1. Узнайте, что Империи известно о принцессе Лее (поиск по имени «Leia»). Под каким номером она определена в системе?

Делаем GET запрос поиск. Документация -https://swapi.dev/documentation#search
curl --location 'https://swapi.dev/api/people/?search=Leia'
В ответе видим ссылку на Лею с пятым номером https://swapi.dev/api/people/5/

2. В каком году родился Хан Соло (Han Solo)?
Также как и Лею ищем Хан Соло
curl --location 'https://swapi.dev/api/people/?search=Han%20Solo'
В ответе видим "birth_year": "29BBY"

3.Что известно Империи о родной планете вуки Кашиик (Kashyyyk)? Как она называется на родном языке вуки?

Ищем планету.
curl --location 'https://swapi.dev/api/planets/?search=Kashyyyk'
Находим ее id https://swapi.dev/api/planets/14/ и делаем запрос на получение данных по планете
curl --location 'https://swapi.dev/api/planets/14/'
Чтобы получить название на родном языке вуки нужно добавить query param, format=wookiee
curl --location 'https://swapi.dev/api/planets/14?format=wookiee'
Называется Kracacrororoor

4. Какие категории информации есть у Империи?

Со списком всех полей нужно ознакомиться в документации https://swapi.dev/documentation#planets


5*. Задание со звездочкой, найти звезду смерти.

Она находится в разделе startships (космические корабли)
curl --location 'https://swapi.dev/api/starships/9'
 
Задание 3. Что мы знаем о футболистах.

Блок 1

Вопрос 1: Что такое нормализация в базах данных и какие этапы нормализации вы знаете?
Ответ:
Нормализация — это процесс организации данных в базе данных с целью минимизации избыточности и обеспечения целостности данных. Основные этапы нормализации:
1. Первая нормальная форма (1NF):
- Удаление повторяющихся групп данных.
- Все столбцы должны содержать атомарные значения.
2. Вторая нормальная форма (2NF):
- Требуется выполнение 1NF.
- Удаление частичной функциональной зависимости, т.е. зависимостей от части составного первичного ключа.
3. Третья нормальная форма (3NF):
- Выполнение 2NF.
- Удаление транзитивных зависимостей между атрибутами.
4. Бойс-Кодд Нормальная Форма (BCNF):
- Расширение 3NF. Каждый детерминант является кандидатом на ключ.

Вопрос 2: Почему важно иметь первичный ключ в таблице, и как он влияет на целостность данных?
Ответ:
Первичный ключ обеспечивает уникальную идентификацию записей в таблице.
Целостность данных:
- Исключает дублирование записей.
- Гарантирует возможность однозначного поиска, обновления и удаления записей.
Связи между таблицами:
- Первичный ключ используется для создания внешних ключей, которые поддерживают ссылочную целостность между таблицами.

Вопрос 3: Что происходит, когда вы пытаетесь вставить значение в столбец с уникальным ограничением (UNIQUE) и оно уже существует в другой записи?
Ответ:
Если значение, которое вы пытаетесь вставить, уже существует, то СУБД (например, PostgreSQL, MySQL) выбросит ошибку о нарушении уникального ограничения. Такая защита предотвращает дублирование уникальных данных, например, email, username и т.д.
 
Блок 2

Уровень 1: Самый молодой игрок
Запрос:
SELECT first_name, last_name, dob 
FROM Players 
ORDER BY dob DESC 
LIMIT 1;
Ответ:
Самый молодой игрок — Max Verstappen, дата рождения: 2001-01-30.

Уровень 2: Наиболее результативный игрок
Запрос:
SELECT p.first_name, p.last_name, SUM(l.goals) AS total_goals
FROM Players p
JOIN Lineups l ON p.player_id = l.player_id
GROUP BY p.first_name, p.last_name
ORDER BY total_goals DESC
LIMIT 1;
Ответ:
Наиболее результативный игрок — Lord Farquaad, общее количество голов: 22.

Уровень 3: Злостный нарушитель
Запрос:
SELECT p.first_name, p.last_name, COUNT(l.cards) AS total_cards
FROM Players p
JOIN Lineups l ON p.player_id = l.player_id
WHERE l.cards IS NOT NULL
GROUP BY p.first_name, p.last_name
ORDER BY total_cards DESC
LIMIT 1;
Ответ:
Злостный нарушитель — Ryan Gosling, общее количество карточек: 33.
